{"ast":null,"code":"// chronology.js v0.4 - Copyright (c) 2013 Wout Fierens - Licensed under the MIT license\n;\n(function () {\n  // Main class\n  var Chronology = function Chronology(settings) {\n    /* default settings */\n    this.settings = {\n      limit: 20,\n      call: true\n      /* merge settings */\n\n    };\n    this.set(settings);\n    /* initialize stacks */\n\n    this.clear();\n  }; // Change settings\n\n\n  Chronology.prototype.set = function (settings) {\n    for (var s in settings) {\n      this.settings[s] = settings[s];\n    }\n\n    return this;\n  }; // Add occurence\n\n\n  Chronology.prototype.add = function (occurence) {\n    /* clear redo stack */\n    this.redos = [];\n    /* typecast occurence */\n\n    if (!occurence instanceof Chronology.Occurence) occurence = new Chronology.Occurence(occurence);\n    /* store new occurence */\n\n    this.undos.unshift(occurence);\n    /* call new current action */\n\n    if (occurence.call === true || typeof occurence.call == 'undefined' && this.settings.call === true) occurence.up();\n    /* trim the undos stack to length of limit */\n\n    if (this.settings.limit) this.undos.splice(this.settings.limit);\n    /* call back */\n\n    if (typeof this.settings.onAdd == 'function') this.settings.onAdd(occurence);\n    return this;\n  }; // Set the values to their initial state\n\n\n  Chronology.prototype.clear = function () {\n    /* clear arrays, retain state */\n    this.redos = [];\n    this.undos = [];\n    /* call back for action */\n\n    if (typeof this.settings.onClear == 'function') this.settings.onClear();\n    return this;\n  }; // Set the values to their initial state\n\n\n  Chronology.prototype.revert = function () {\n    var occurence;\n    /* walk back to initial state */\n\n    while (occurence = this.undos.shift()) {\n      occurence.down();\n    }\n    /* clear everything out */\n\n\n    return this.clear();\n  }; // Undo last added action\n\n\n  Chronology.prototype.undo = function () {\n    var occurence;\n    /* get most recent undo */\n\n    if (occurence = this.undos.shift()) {\n      /* move current action to redos */\n      this.redos.unshift(occurence);\n      /* restore to previous state */\n\n      occurence.down();\n      /* call back for action */\n\n      if (typeof this.settings.onUndo == 'function') this.settings.onUndo(occurence);\n      /* call back when reaching beginning of time */\n\n      if (this.undos.length == 0 && typeof this.settings.onBegin == 'function') this.settings.onBegin(occurence);\n    }\n\n    return this;\n  }; // Redo the last action\n\n\n  Chronology.prototype.redo = function () {\n    var occurence;\n    /* get most recent redo */\n\n    if (occurence = this.redos.shift()) {\n      /* move current action to undos */\n      this.undos.unshift(occurence);\n      /* restore to next state */\n\n      occurence.up();\n      /* call back for action */\n\n      if (typeof this.settings.onRedo == 'function') this.settings.onRedo(occurence);\n      /* call back when reaching beginning of time */\n\n      if (this.redos.length == 0 && typeof this.settings.onEnd == 'function') this.settings.onEnd(occurence);\n    }\n\n    return this;\n  }; // Occurence class\n\n\n  Chronology.Occurence = function (states) {\n    states = states || {};\n\n    this.up = states.up || function () {};\n\n    this.down = states.down || function () {};\n  }; // Use AMD or CommonJS, fall back on global scope if both are not present.\n\n\n  if (typeof define === 'function' && define.amd) define(function () {\n    return Chronology;\n  });else if (typeof exports !== 'undefined') exports.Chronology = Chronology;else this.Chronology = Chronology;\n}).call(this);","map":{"version":3,"sources":["/home/adarsh/Desktop/POC/Final/React/editor/src/plugins/chronology.js"],"names":["Chronology","settings","limit","call","set","clear","prototype","s","add","occurence","redos","Occurence","undos","unshift","up","splice","onAdd","onClear","revert","shift","down","undo","onUndo","length","onBegin","redo","onRedo","onEnd","states","define","amd","exports"],"mappings":"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","sourcesContent":["// chronology.js v0.4 - Copyright (c) 2013 Wout Fierens - Licensed under the MIT license\n\n;(function() {\n  // Main class\n  var Chronology = function(settings) {\n    /* default settings */\n    this.settings = {\n      limit:  20\n    , call:   true\n    }\n\n    /* merge settings */\n    this.set(settings)\n\n    /* initialize stacks */\n    this.clear()\n  }\n\n  // Change settings\n  Chronology.prototype.set = function(settings) {\n    for (var s in settings)\n      this.settings[s] = settings[s]\n\n    return this\n  }\n\n  // Add occurence\n  Chronology.prototype.add = function(occurence) {\n    /* clear redo stack */\n    this.redos = []\n\n    /* typecast occurence */\n    if (!occurence instanceof Chronology.Occurence)\n      occurence = new Chronology.Occurence(occurence)\n\n    /* store new occurence */\n    this.undos.unshift(occurence)\n\n    /* call new current action */\n    if (occurence.call === true || (typeof occurence.call == 'undefined' && this.settings.call === true))\n      occurence.up()\n\n    /* trim the undos stack to length of limit */\n    if (this.settings.limit)\n      this.undos.splice(this.settings.limit)\n\n    /* call back */\n    if (typeof this.settings.onAdd == 'function')\n      this.settings.onAdd(occurence)\n\n    return this\n  }\n\n  // Set the values to their initial state\n  Chronology.prototype.clear = function() {\n    /* clear arrays, retain state */\n    this.redos = []\n    this.undos = []\n\n    /* call back for action */\n    if (typeof this.settings.onClear == 'function')\n      this.settings.onClear()\n\n    return this\n  }\n\n  // Set the values to their initial state\n  Chronology.prototype.revert = function() {\n    var occurence\n\n    /* walk back to initial state */\n    while(occurence = this.undos.shift())\n      occurence.down()\n\n    /* clear everything out */\n    return this.clear()\n  }\n\n  // Undo last added action\n  Chronology.prototype.undo = function() {\n    var occurence\n\n    /* get most recent undo */\n    if (occurence = this.undos.shift()) {\n      /* move current action to redos */\n      this.redos.unshift(occurence)\n  \n      /* restore to previous state */\n      occurence.down()\n    \n      /* call back for action */\n      if (typeof this.settings.onUndo == 'function')\n        this.settings.onUndo(occurence)\n\n      /* call back when reaching beginning of time */\n      if (this.undos.length == 0 && typeof this.settings.onBegin == 'function')\n        this.settings.onBegin(occurence)\n    }\n\n    return this\n  }\n\n  // Redo the last action\n  Chronology.prototype.redo = function() {\n    var occurence\n\n    /* get most recent redo */\n    if (occurence = this.redos.shift()) {\n      /* move current action to undos */\n      this.undos.unshift(occurence)\n  \n      /* restore to next state */\n      occurence.up()\n\n      /* call back for action */\n      if (typeof this.settings.onRedo == 'function')\n        this.settings.onRedo(occurence)\n\n      /* call back when reaching beginning of time */\n      if (this.redos.length == 0 && typeof this.settings.onEnd == 'function')\n        this.settings.onEnd(occurence)\n    }\n    return this\n  }\n\n  // Occurence class\n  Chronology.Occurence = function(states) {\n    states    = states      || {}\n    this.up   = states.up   || function() {}\n    this.down = states.down || function() {}\n  }\n\n  // Use AMD or CommonJS, fall back on global scope if both are not present.\n  if (typeof define === 'function' && define.amd)\n    define(function() { return Chronology })\n  else if (typeof exports !== 'undefined')\n    exports.Chronology = Chronology\n  else\n    this.Chronology = Chronology\n\n}).call(this)"]},"metadata":{},"sourceType":"module"}