{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // v 1.11.2\n// @ts-check\n\n/* \n    ____                   _____      __          __ \n   / __ \\_________ _____ _/ ___/___  / /__  _____/ /_\n  / / / / ___/ __ `/ __ `/\\__ \\/ _ \\/ / _ \\/ ___/ __/\n / /_/ / /  / /_/ / /_/ /___/ /  __/ /  __/ /__/ /_  \n/_____/_/   \\__,_/\\__, //____/\\___/_/\\___/\\___/\\__/  \n                 /____/                              \n\n {*} {*} STAR THIS PLUGIN ON GITHUB: {*} {*}\n\n https://github.com/ThibaultJanBeyer/DragSelect\n Please give it a like, this is what makes me happy :-)\n Thanks You\n\n {*} {*} STAR THIS PLUGIN ON GITHUB: {*} {*}\n\n ******************************************\n ********* The MIT License (MIT) **********\n ******************************************\n Copyright (c) 2017 ThibaultJanBeyer\n web: http://www.thibaultjanbeyer.com/\n github: https://github.com/ThibaultJanBeyer/DragSelect\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n --- Notes ---\n Checking types using JS-Docs inspired by this post:\n https://medium.com/@trukrs/type-safe-javascript-with-jsdoc-7a2a63209b76\n ---\n*/\n// Setup\n//////////////////////////////////////////////////////////////////////////////////////\n\n\nvar DragSelect =\n/*#__PURE__*/\nfunction () {\n  /** @type {boolean} */\n\n  /** @type {{x: number, y: number}} */\n\n  /** @type {{x: number, y: number}} */\n\n  /** @type {{x: number, y: number}} */\n\n  /** @type {{x: number, y: number}} */\n\n  /** @type {Array.<(SVGElement|HTMLElement)>} */\n\n  /** @type {Array.<(SVGElement|HTMLElement)>} */\n  // memory to fix #9\n\n  /**\n   * @constructor\n   * @param {object} options - The options object.\n   * @param {HTMLElement | SVGElement | Document} [options.area=document] area in which you can drag. If not provided it will be the whole document\n   * @param {number} [options.autoScrollSpeed=1] Speed in which the area scrolls while selecting (if available). Unit is pixel per movement. Default = 1\n   * @param {Function} [options.callback=(selected, event) => {}] a callback function that gets fired when the element is dropped. This callback gets a property which is an array that holds all selected nodes. The second property passed is the event object.\n   * @param {boolean} [options.customStyles=false] if set to true, no styles (except for position absolute) will be applied by default\n   * @param {string} [options.hoverClass=ds-hover] the class assigned to the mouse hovered items\n   * @param {boolean} [options.multiSelectMode=false] Add newly selected elements to the selection instead of replacing them. Default = false\n   * @param {Function} [options.onDragMove=()=>{}] It is fired when the user drags. This callback gets the event object. Executed before DragSelect function code ran, after getting the current mouse position.\n   * @param {Function} [options.onDragStartBegin=()=>{}] Is fired when the user clicks in the area. This callback gets the event object. Executed *before* DragSelect function code ran.\n   * @param {Function} [options.onDragStart=()=>{}] It is fired when the user clicks in the area. This callback gets the event object. Executed after DragSelect function code ran, before the setup of event listeners.\n   * @param {Function} [options.onElementSelect=()=>{}] It is fired every time an element is selected. This callback gets a property which is the just selected node\n   * @param {Function} [options.onElementUnselect=()=>{}] It is fired every time an element is de-selected. This callback gets a property which is the just de-selected node\n   * @param {string} [options.selectableClass=ds-selectable] the class assigned to the elements that can be selected\n   * @param {HTMLElement[] | SVGElement[] | HTMLElement | SVGElement} [options.selectables=[]] the elements that can be selected\n   * @param {string} [options.selectedClass=ds-selected] the class assigned to the selected items\n   * @param {HTMLElement} [options.selector=HTMLElement] the square that will draw the selection\n   * @param {string} [options.selectorClass=ds-selector] the class assigned to the square selector helper\n   * @param {string[]} [options.multiSelectKeys=['ctrlKey', 'shiftKey', 'metaKey']] An array of keys that allows switching to the multi-select mode (see the @multiSelectMode option). The only possible values are keys that are provided via the event object. So far: <kbd>ctrlKey</kbd>, <kbd>shiftKey</kbd>, <kbd>metaKey</kbd> and <kbd>altKey</kbd>. Provide an empty array `[]` if you want to turn off the functionality.\n   */\n  function DragSelect(_ref) {\n    var _this = this;\n\n    var _ref$area = _ref.area,\n        area = _ref$area === void 0 ? document : _ref$area,\n        _ref$autoScrollSpeed = _ref.autoScrollSpeed,\n        autoScrollSpeed = _ref$autoScrollSpeed === void 0 ? 1 : _ref$autoScrollSpeed,\n        _ref$callback = _ref.callback,\n        callback = _ref$callback === void 0 ? function () {} : _ref$callback,\n        _ref$customStyles = _ref.customStyles,\n        customStyles = _ref$customStyles === void 0 ? false : _ref$customStyles,\n        _ref$hoverClass = _ref.hoverClass,\n        hoverClass = _ref$hoverClass === void 0 ? 'ds-hover' : _ref$hoverClass,\n        _ref$multiSelectKeys = _ref.multiSelectKeys,\n        multiSelectKeys = _ref$multiSelectKeys === void 0 ? ['ctrlKey', 'shiftKey', 'metaKey'] : _ref$multiSelectKeys,\n        _ref$multiSelectMode = _ref.multiSelectMode,\n        multiSelectMode = _ref$multiSelectMode === void 0 ? false : _ref$multiSelectMode,\n        _ref$onDragMove = _ref.onDragMove,\n        onDragMove = _ref$onDragMove === void 0 ? function () {} : _ref$onDragMove,\n        _ref$onDragStart = _ref.onDragStart,\n        onDragStart = _ref$onDragStart === void 0 ? function () {} : _ref$onDragStart,\n        _ref$onDragStartBegin = _ref.onDragStartBegin,\n        onDragStartBegin = _ref$onDragStartBegin === void 0 ? function () {} : _ref$onDragStartBegin,\n        _ref$onElementSelect = _ref.onElementSelect,\n        onElementSelect = _ref$onElementSelect === void 0 ? function () {} : _ref$onElementSelect,\n        _ref$onElementUnselec = _ref.onElementUnselect,\n        onElementUnselect = _ref$onElementUnselec === void 0 ? function () {} : _ref$onElementUnselec,\n        _ref$selectableClass = _ref.selectableClass,\n        selectableClass = _ref$selectableClass === void 0 ? 'ds-selectable' : _ref$selectableClass,\n        _ref$selectables = _ref.selectables,\n        selectables = _ref$selectables === void 0 ? [] : _ref$selectables,\n        _ref$selectedClass = _ref.selectedClass,\n        selectedClass = _ref$selectedClass === void 0 ? 'ds-selected' : _ref$selectedClass,\n        _ref$selector = _ref.selector,\n        selector = _ref$selector === void 0 ? undefined : _ref$selector,\n        _ref$selectorClass = _ref.selectorClass,\n        selectorClass = _ref$selectorClass === void 0 ? 'ds-selector' : _ref$selectorClass;\n\n    _classCallCheck(this, DragSelect);\n\n    _defineProperty(this, \"_multiSelectKeyPressed\", false);\n\n    _defineProperty(this, \"_initialCursorPos\", {\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_newCursorPos\", {\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_previousCursorPos\", {\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_initialScroll\", {\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_selected\", []);\n\n    _defineProperty(this, \"_prevSelected\", []);\n\n    _defineProperty(this, \"_lastTouch\", void 0);\n\n    _defineProperty(this, \"_onClick\", function (event) {\n      if (_this.mouseInteraction) {\n        return;\n      } // fix firefox doubleclick issue\n\n\n      if (_this._isRightClick(event)) {\n        return;\n      }\n      /** @type {any} */\n\n\n      var node = event.target;\n\n      if (_this._isMultiSelectKeyPressed(event)) {\n        _this._prevSelected = _this._selected.slice();\n      } // #9\n      else {\n          _this._prevSelected = [];\n        } // #9\n\n\n      _this.checkIfInsideSelection(true); // reset selection if no multiselectionkeypressed\n\n\n      if (_this.selectables.indexOf(node) > -1) {\n        _this.toggle(node);\n      }\n\n      _this.reset();\n    });\n\n    _defineProperty(this, \"_startUp\", function (event) {\n      // touchmove handler\n      if (event.type === 'touchstart') // Call preventDefault() to prevent double click issue, see https://github.com/ThibaultJanBeyer/DragSelect/pull/29 & https://developer.mozilla.org/vi/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent\n        event.preventDefault(); // callback\n\n      _this.onDragStartBegin(event);\n\n      if (_this._breaked) {\n        return false;\n      }\n\n      if (_this._isRightClick(event)) {\n        return;\n      }\n\n      _this.mouseInteraction = true;\n      _this.selector.style.display = 'block';\n\n      if (_this._isMultiSelectKeyPressed(event)) {\n        _this._prevSelected = _this._selected.slice();\n      } // #9\n      else {\n          _this._prevSelected = [];\n        } // #9\n      // move element on location\n\n\n      _this._getStartingPositions(event);\n\n      _this.checkIfInsideSelection(true);\n\n      _this.selector.style.display = 'none'; // hidden unless moved, fix for issue #8\n      // callback\n\n      _this.moveStartCallback(event);\n\n      if (_this._breaked) {\n        return false;\n      } // event listeners\n\n\n      _this.area.removeEventListener('mousedown', _this._startUp);\n\n      _this.area.removeEventListener('touchstart', _this._startUp, {\n        passive: false\n      });\n\n      _this.area.addEventListener('mousemove', _this._handleMove);\n\n      _this.area.addEventListener('touchmove', _this._handleMove);\n\n      document.addEventListener('mouseup', _this.reset);\n      document.addEventListener('touchend', _this.reset);\n    });\n\n    _defineProperty(this, \"_handleMove\", function (event) {\n      var selectorPos = _this._getPosition(event); // callback\n\n\n      _this.moveCallback(event);\n\n      if (_this._breaked) {\n        return false;\n      }\n\n      _this.selector.style.display = 'block'; // hidden unless moved, fix for issue #8\n      // move element on location\n\n      _this._updatePos(_this.selector, selectorPos);\n\n      _this.checkIfInsideSelection(); // scroll area if area is scrollable\n\n\n      _this._autoScroll(event);\n    });\n\n    _defineProperty(this, \"reset\", function (event) {\n      _this._previousCursorPos = _this._getCursorPos(event, _this.area);\n      document.removeEventListener('mouseup', _this.reset);\n      document.removeEventListener('touchend', _this.reset);\n\n      _this.area.removeEventListener('mousemove', _this._handleMove);\n\n      _this.area.removeEventListener('touchmove', _this._handleMove);\n\n      _this.area.addEventListener('mousedown', _this._startUp);\n\n      _this.area.addEventListener('touchstart', _this._startUp, {\n        passive: false\n      });\n\n      _this.callback(_this._selected, event);\n\n      if (_this._breaked) {\n        return false;\n      }\n\n      _this.selector.style.width = '0';\n      _this.selector.style.height = '0';\n      _this.selector.style.display = 'none';\n      setTimeout(function () {\n        // debounce in order \"onClick\" to work\n        this.mouseInteraction = false;\n      }.bind(_this), 100);\n    });\n\n    this.selectedClass = selectedClass;\n    this.hoverClass = hoverClass;\n    this.selectorClass = selectorClass;\n    this.selectableClass = selectableClass;\n    this.selectables = [];\n\n    this._handleSelectables(this._toArray(selectables));\n\n    this.multiSelectKeys = multiSelectKeys;\n    this.multiSelectMode = multiSelectMode;\n    this.autoScrollSpeed = autoScrollSpeed === 0 ? 0 : autoScrollSpeed;\n    this.selectCallback = onElementSelect;\n    this.unselectCallback = onElementUnselect;\n    this.onDragStartBegin = onDragStartBegin;\n    this.moveStartCallback = onDragStart;\n    this.moveCallback = onDragMove;\n    this.callback = callback;\n    this.area = this._handleArea(area);\n    this.customStyles = customStyles; // Selector\n\n    this.selector = selector || this._createSelector();\n    this.selector.classList.add(this.selectorClass);\n    this.start();\n  }\n  /**\n   * @param {(HTMLElement|SVGElement|any)} area\n   * @private\n   */\n\n\n  _createClass(DragSelect, [{\n    key: \"_handleArea\",\n    value: function _handleArea(area) {\n      if (area === document) return area; // Area has to have a special position attribute for calculations\n\n      var computedArea = getComputedStyle(area);\n      var isPositioned = computedArea.position === 'absolute' || computedArea.position === 'relative' || computedArea.position === 'fixed';\n\n      if (!isPositioned) {\n        area.style.position = 'relative';\n      }\n\n      return area;\n    }\n    /**\n     * Add/Remove Selectables also handles css classes and event listeners.\n     * @param {HTMLElement[]|SVGElement[]} selectables - selectable elements.\n     * @param {boolean} [remove] - if elements should be removed.\n     * @param {boolean} [fromSelection] - if elements should also be added/removed to the selection.\n     * @private\n     */\n\n  }, {\n    key: \"_handleSelectables\",\n    value: function _handleSelectables(selectables, remove, fromSelection) {\n      for (var index = 0; index < selectables.length; index++) {\n        var selectable = selectables[index];\n        var indexOf = this.selectables.indexOf(selectable);\n\n        if (indexOf < 0 && !remove) {\n          this._addSelectable(selectable, fromSelection);\n        } else if (indexOf > -1 && remove) {\n          this._removeSelectable(selectable, indexOf, fromSelection);\n        }\n      }\n    }\n    /**\n     * @param {(HTMLElement|SVGElement)} selectable\n     * @param {boolean} toSelection also adds it to the current selection\n     * @private\n     */\n\n  }, {\n    key: \"_addSelectable\",\n    value: function _addSelectable(selectable, toSelection) {\n      selectable.classList.add(this.selectableClass);\n      selectable.addEventListener('click', this._onClick);\n      this.selectables.push(selectable); // also add to current selection\n\n      if (toSelection && this._selected.indexOf(selectable) < 0) {\n        selectable.classList.add(this.selectedClass);\n\n        this._selected.push(selectable);\n      }\n    }\n    /**\n     * @param {(HTMLElement|SVGElement)} selectable\n     * @param {number} indexOf\n     * @param {boolean} [fromSelection] also adds it to the current selection\n     * @private\n     */\n\n  }, {\n    key: \"_removeSelectable\",\n    value: function _removeSelectable(selectable, indexOf, fromSelection) {\n      selectable.classList.remove(this.hoverClass);\n      selectable.classList.remove(this.selectableClass);\n      selectable.removeEventListener('click', this._onClick);\n      this.selectables.splice(indexOf, 1); // also remove from current selection\n\n      if (fromSelection && this._selected.indexOf(selectable) > -1) {\n        selectable.classList.remove(this.selectedClass);\n\n        this._selected.splice(this._selected.indexOf(selectable), 1);\n      }\n    }\n    /**\n     * Triggers when a node is actively selected.\n     *\n     * This might be an \"onClick\" method but it also triggers when\n     * <button> nodes are pressed via the keyboard.\n     * Making DragSelect accessible for everyone!\n     *\n     * @param {MouseEvent} event\n     * @private\n     */\n\n  }, {\n    key: \"_createSelector\",\n\n    /**\n     * Create the selector node when not provided by options object.\n     * @return {HTMLElement}\n     * @private\n     */\n    value: function _createSelector() {\n      var selector = document.createElement('div');\n      selector.style.position = 'absolute';\n\n      if (!this.customStyles) {\n        selector.style.background = 'rgba(0, 0, 255, 0.1)';\n        selector.style.border = '1px solid rgba(0, 0, 255, 0.45)';\n        selector.style.display = 'none';\n        selector.style.pointerEvents = 'none'; // fix for issue #8 (ie11+)\n      }\n\n      var _area = this.area === document ? document.body : this.area;\n\n      _area.appendChild(selector);\n\n      return selector;\n    } // Start\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Starts the functionality. Automatically triggered when created.\n     * Also, reset the functionality after a teardown\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.area.addEventListener('mousedown', this._startUp);\n      this.area.addEventListener('touchstart', this._startUp, {\n        passive: false\n      });\n    }\n    /**\n     * Startup when the area is clicked.\n     * @param {Object} event - The event object.\n     * @private\n     */\n\n  }, {\n    key: \"_isMultiSelectKeyPressed\",\n\n    /**\n     * Check if some multiselection modifier key is pressed\n     * @param {Object} event - The event object.\n     * @return {boolean} this._isMultiSelectKeyPressed\n     * @private\n     */\n    value: function _isMultiSelectKeyPressed(event) {\n      this._multiSelectKeyPressed = false;\n\n      if (this.multiSelectMode) {\n        this._multiSelectKeyPressed = true;\n      } else {\n        for (var index = 0; index < this.multiSelectKeys.length; index++) {\n          var mKey = this.multiSelectKeys[index];\n\n          if (event[mKey]) {\n            this._multiSelectKeyPressed = true;\n          }\n        }\n      }\n\n      return this._multiSelectKeyPressed;\n    }\n    /**\n     * Grabs the starting position of all needed elements\n     * @param {Object} event - The event object.\n     * @private\n     */\n\n  }, {\n    key: \"_getStartingPositions\",\n    value: function _getStartingPositions(event) {\n      this._initialCursorPos = this._newCursorPos = this._getCursorPos(event, this.area);\n      this._initialScroll = this.getScroll(this.area);\n      var selectorPos = {};\n      selectorPos.x = this._initialCursorPos.x + this._initialScroll.x;\n      selectorPos.y = this._initialCursorPos.y + this._initialScroll.y;\n      selectorPos.w = 0;\n      selectorPos.h = 0;\n\n      this._updatePos(this.selector, selectorPos);\n    } // Movements/Sizing of selection\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Handles what happens while the mouse is moved\n     * @param {Object} event - The event object.\n     * @private\n     */\n\n  }, {\n    key: \"_getPosition\",\n\n    /**\n     * Calculates and returns the exact x,y,w,h positions of the selector element\n     * @param {object} [event] - The event object.\n     * @returns {{x:number,y:number,w:number,h:number}}\n     * @private\n     */\n    value: function _getPosition(event) {\n      var cursorPosNew = this._getCursorPos(event, this.area);\n\n      var scrollNew = this.getScroll(this.area); // save for later retrieval\n\n      this._newCursorPos = cursorPosNew; // if area or document is scrolled those values have to be included aswell\n\n      var scrollAmount = {\n        x: scrollNew.x - this._initialScroll.x,\n        y: scrollNew.y - this._initialScroll.y\n      };\n      /** check for direction\n       *\n       * This is quite complicated math, so also quite complicated to explain. Lemme’ try:\n       *\n       * Problem #1:\n       * Sadly in HTML we can not have negative sizes.\n       * so if we want to scale our element 10px to the right then it is easy,\n       * we just have to add +10px to the width. But if we want to scale the element\n       * -10px to the left then things become more complicated, we have to move\n       * the element -10px to the left on the x axis and also scale the element\n       * by +10px width to fake a negative sizing.\n       *\n       * One solution to this problem is using css-transforms scale() with\n       * transform-origin of top left. BUT we can’t use this since it will size\n       * everything, then when your element has a border for example, the border will\n       * get inanely huge. Also transforms are not widely supported in IE.\n       *\n       * Example #1:\n       * Unfortunately, things get even more complicated when we are inside a scrollable\n       * DIV. Then, let’s say we scoll to the right by 10px and move the cursor right by 5px in our\n       * checks we have to substract 10px from the initialcursor position in our check\n       * (since the inital position is moved to the left by 10px) so in our example:\n       * 1. cursorPosNew.x (5) > initialCursorPos.x (0) - scrollAmount.x (10) === 5 > -10 === true\n       * then reset the x position to its initial position (since we might have changed that\n       * position when scrolling to the left before going right) in our example:\n       * 2. selectorPos.x = initialCursorPos.x (0) + initialScroll.x (0) === 0;\n       * then we cann calculate the elements width, which is\n       * the new cursor position minus the initial one plus the scroll amount, so in our example:\n       * 3. selectorPos.w = cursorPosNew.x (5) - initialCursorPos.x (0) + scrollAmount.x (10) === 15;\n       *\n       * let’s say after that movement we now scroll 20px to the left and move our cursor by 30px to the left:\n       * 1b. cursorPosNew.x (-30) > initialCursorPos.x (0) - scrollAmount.x (-20) === -30 > -20 === false;\n       * 2b. selectorPos.x = cursorPosNew.x (-30) + scrollNew.x (-20)\n       *                   === -50;  // move left position to cursor (for more info see Problem #1)\n       * 3b. selectorPos.w = initialCursorPos.x (0) - cursorPosNew.x (-30) - scrollAmount.x (-20)\n       *                   === 0--30--20 === 0+30+20 === 50;  // scale width to original left position (for more info see Problem #1)\n       *\n       * same thing has to be done for top/bottom\n       *\n       * I hope that makes sence, try stuff out and play around with variables to get a hang of it.\n       */\n\n      var selectorPos = {}; // right\n\n      if (cursorPosNew.x > this._initialCursorPos.x - scrollAmount.x) {\n        // 1.\n        selectorPos.x = this._initialCursorPos.x + this._initialScroll.x; // 2.\n\n        selectorPos.w = cursorPosNew.x - this._initialCursorPos.x + scrollAmount.x; // 3.\n        // left\n      } else {\n        // 1b.\n        selectorPos.x = cursorPosNew.x + scrollNew.x; // 2b.\n\n        selectorPos.w = this._initialCursorPos.x - cursorPosNew.x - scrollAmount.x; // 3b.\n      } // bottom\n\n\n      if (cursorPosNew.y > this._initialCursorPos.y - scrollAmount.y) {\n        selectorPos.y = this._initialCursorPos.y + this._initialScroll.y;\n        selectorPos.h = cursorPosNew.y - this._initialCursorPos.y + scrollAmount.y; // top\n      } else {\n        selectorPos.y = cursorPosNew.y + scrollNew.y;\n        selectorPos.h = this._initialCursorPos.y - cursorPosNew.y - scrollAmount.y;\n      }\n\n      return selectorPos;\n    } // Colision detection\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Checks if any selectable element is inside selection.\n     * @param {boolean} [force] forces through. Handles first clicks and accessibility. Here is user is clicking directly onto some element at start, (contrary to later hovers) we can assume that he really wants to select/deselect that item.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"checkIfInsideSelection\",\n    value: function checkIfInsideSelection(force) {\n      var anyInside = false;\n\n      for (var i = 0, il = this.selectables.length; i < il; i++) {\n        var selectable = this.selectables[i];\n        var scroll = this.getScroll(this.area);\n        var selectionRect = {\n          y: this.selector.getBoundingClientRect().top + scroll.y,\n          x: this.selector.getBoundingClientRect().left + scroll.x,\n          h: this.selector.offsetHeight,\n          w: this.selector.offsetWidth\n        };\n\n        if (this._isElementTouching(selectable, selectionRect, scroll)) {\n          this._handleSelection(selectable, force);\n\n          anyInside = true;\n        } else {\n          this._handleUnselection(selectable, force);\n        }\n      }\n\n      return anyInside;\n    }\n    /**\n     * Logic when an item is selected\n     * @param {(HTMLElement|SVGElement)} item selected item.\n     * @param {boolean} [force] forces through.\n     * @private\n     */\n\n  }, {\n    key: \"_handleSelection\",\n    value: function _handleSelection(item, force) {\n      if (item.classList.contains(this.hoverClass) && !force) {\n        return false;\n      }\n\n      var posInSelectedArray = this._selected.indexOf(item);\n\n      if (posInSelectedArray < 0) {\n        this.select(item);\n      } else if (posInSelectedArray > -1 && this._multiSelectKeyPressed) {\n        this.unselect(item);\n      }\n\n      item.classList.add(this.hoverClass);\n    }\n    /**\n     * Logic when an item is de-selected\n     * @param {(HTMLElement|SVGElement)} item selected item.\n     * @param {boolean} [force] forces through.\n     * @private\n     */\n\n  }, {\n    key: \"_handleUnselection\",\n    value: function _handleUnselection(item, force) {\n      if (!item.classList.contains(this.hoverClass) && !force) {\n        return false;\n      }\n\n      var posInSelectedArray = this._selected.indexOf(item);\n\n      var isInPrevSelection = this._prevSelected.indexOf(item); // #9\n\n      /**\n       * Special algorithm for issue #9.\n       * if a multiselectkey is pressed, ds 'remembers' the last selection and reverts\n       * to that state if the selection is not kept, to mimic the natural OS behaviour\n       * = if item was selected and is not in selection anymore, reselect it\n       * = if item was not selected and is not in selection anymore, unselect it\n       */\n\n\n      if (posInSelectedArray > -1 && isInPrevSelection < 0) {\n        this.unselect(item);\n      } else if (posInSelectedArray < 0 && isInPrevSelection > -1) {\n        this.select(item);\n      }\n\n      item.classList.remove(this.hoverClass);\n    }\n    /**\n     * Adds an item to the selection.\n     * @param {(HTMLElement|SVGElement)} item selected item.\n     * @return {(HTMLElement|SVGElement|false)} item\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(item) {\n      if (this._selected.indexOf(item) > -1) return false;\n\n      this._selected.push(item);\n\n      item.classList.add(this.selectedClass);\n      this.selectCallback(item);\n      if (this._breaked) return false;\n      return item;\n    }\n    /**\n     * Removes an item from the selection.\n     * @param {(HTMLElement|SVGElement)} item selected item.\n     * @return {(HTMLElement|SVGElement|false)} item\n     */\n\n  }, {\n    key: \"unselect\",\n    value: function unselect(item) {\n      if (this._selected.indexOf(item) < 0) return false;\n\n      this._selected.splice(this._selected.indexOf(item), 1);\n\n      item.classList.remove(this.selectedClass);\n      this.unselectCallback(item);\n      if (this._breaked) return false;\n      return item;\n    }\n    /**\n     * Adds/Removes an item to the selection.\n     * If it is already selected = remove, if not = add.\n     * @param {(HTMLElement|SVGElement)} item – item to select.\n     * @return {(HTMLElement|SVGElement)} item\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(item) {\n      if (this._selected.indexOf(item) > -1) {\n        this.unselect(item);\n      } else {\n        this.select(item);\n      }\n\n      return item;\n    }\n    /**\n     * Checks if element is touched by the selector (and vice-versa)\n     * @param {(HTMLElement|SVGElement)} element – item.\n     * @param {Object} selectionRect – Container bounds:\n       Example: {\n        y: this.selector.getBoundingClientRect().top + scroll.y,\n        x: this.selector.getBoundingClientRect().left + scroll.x,\n        h: this.selector.offsetHeight,\n        w: this.selector.offsetWidth\n      };\n     * @param {Object} scroll – Scroll x, y values.\n     * @return {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"_isElementTouching\",\n    value: function _isElementTouching(element, selectionRect, scroll) {\n      var rect = element.getBoundingClientRect();\n      var elementRect = {\n        y: rect.top + scroll.y,\n        x: rect.left + scroll.x,\n        h: rect.height,\n        w: rect.width\n      }; // Axis-Aligned Bounding Box Colision Detection.\n      // Imagine following Example:\n      //    b01\n      // a01[1]a02\n      //    b02      b11\n      //          a11[2]a12\n      //             b12\n      // to check if those two boxes collide we do this AABB calculation:\n      //& a01 < a12 (left border pos box1 smaller than right border pos box2)\n      //& a02 > a11 (right border pos box1 larger than left border pos box2)\n      //& b01 < b12 (top border pos box1 smaller than bottom border pos box2)\n      //& b02 > b11 (bottom border pos box1 larger than top border pos box2)\n      // See: https://en.wikipedia.org/wiki/Minimum_bounding_box#Axis-aligned_minimum_bounding_box and https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n\n      if (selectionRect.x < elementRect.x + elementRect.w && selectionRect.x + selectionRect.w > elementRect.x && selectionRect.y < elementRect.y + elementRect.h && selectionRect.h + selectionRect.y > elementRect.y) {\n        return true; // collision detected!\n      } else {\n        return false;\n      }\n    } // Autoscroll\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Automatically Scroll the area by selecting\n     * @param {Object} event – event object.\n     * @private\n     */\n\n  }, {\n    key: \"_autoScroll\",\n    value: function _autoScroll(event) {\n      var edge = this.isCursorNearEdge(event, this.area);\n      var docEl = document && document.documentElement && document.documentElement.scrollTop && document.documentElement;\n\n      var _area = this.area === document ? docEl || document.body : this.area;\n\n      if (edge === 'top' && _area.scrollTop > 0) {\n        _area.scrollTop -= 1 * this.autoScrollSpeed;\n      } else if (edge === 'bottom') {\n        _area.scrollTop += 1 * this.autoScrollSpeed;\n      } else if (edge === 'left' && _area.scrollLeft > 0) {\n        _area.scrollLeft -= 1 * this.autoScrollSpeed;\n      } else if (edge === 'right') {\n        _area.scrollLeft += 1 * this.autoScrollSpeed;\n      }\n    }\n    /**\n     * Check if the selector is near an edge of the area\n     * @param {Object} [event] event object.\n     * @param {(HTMLElement|SVGElement)} area the area.\n     * @return {('top'|'bottom'|'left'|'right'|false)}\n     */\n\n  }, {\n    key: \"isCursorNearEdge\",\n    value: function isCursorNearEdge(event, area) {\n      var cursorPosition = this._getCursorPos(event, area);\n\n      var areaRect = this.getAreaRect(area);\n      var tolerance = {\n        x: Math.max(areaRect.width / 10, 30),\n        y: Math.max(areaRect.height / 10, 30)\n      };\n\n      if (cursorPosition.y < tolerance.y) {\n        return 'top';\n      } else if (areaRect.height - cursorPosition.y < tolerance.y) {\n        return 'bottom';\n      } else if (areaRect.width - cursorPosition.x < tolerance.x) {\n        return 'right';\n      } else if (cursorPosition.x < tolerance.x) {\n        return 'left';\n      }\n\n      return false;\n    } // Ending\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Unbind functions when mouse click is released\n     */\n\n  }, {\n    key: \"break\",\n\n    /**\n     * Function break: used in callbacks to disable the execution of the upcoming code at the specific moment\n     * In contrary to stop():\n     * - Event listeners, callback calls and calculation will continue working\n     * - Selector won’t display and will not select\n     */\n    value: function _break() {\n      var _this2 = this;\n\n      this._breaked = true;\n      setTimeout( // debounce the break should only break once instantly after call\n      function () {\n        return _this2._breaked = false;\n      }, 100);\n    }\n    /**\n     * Complete function teardown\n     * Will teardown/stop the whole functionality\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.reset();\n      this.area.removeEventListener('mousedown', this._startUp);\n      this.area.removeEventListener('touchstart', this._startUp, {\n        passive: false\n      });\n      document.removeEventListener('mouseup', this.reset);\n      document.removeEventListener('touchend', this.reset);\n    } // Usefull methods for user\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Returns the current selected nodes\n     * @return {Array.<(HTMLElement|SVGElement)>}\n     */\n\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      return this._selected;\n    }\n    /**\n     * Returns cursor x, y position based on event object\n     * Will be relative to an area including the scroll unless advised otherwise\n     * @param {Object} [event]\n     * @param {(HTMLElement|SVGElement|false)} [_area] containing area / this.area if === undefined / document if === false\n     * @param {boolean} [ignoreScroll] if true, the scroll will be ignored\n     * @return {{x:number,y:number}} cursor { x/y }\n     */\n\n  }, {\n    key: \"getCursorPos\",\n    value: function getCursorPos(event, _area, ignoreScroll) {\n      if (!event) return {\n        x: 0,\n        y: 0\n      };\n      var area = _area || _area !== false && this.area;\n\n      var pos = this._getCursorPos(event, area);\n\n      var scroll = ignoreScroll ? {\n        x: 0,\n        y: 0\n      } : this.getScroll(area);\n      return {\n        x: pos.x + scroll.x,\n        y: pos.y + scroll.y\n      };\n    }\n    /**\n     * Adds several items to the selection list\n     * also adds the specific classes and take into account all calculations.\n     * Does not clear the selection, in contrary to .setSelection\n     * Can add multiple nodes at once, in contrary to .select\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes one or multiple nodes\n     * @param {boolean} [triggerCallback] - if callback should be called\n     * @param {boolean} [dontAddToSelectables] - if element should not be added to the list of selectable nodes\n     * @return {Array.<(HTMLElement|SVGElement)>} all selected nodes\n     */\n\n  }, {\n    key: \"addSelection\",\n    value: function addSelection(_nodes, triggerCallback, dontAddToSelectables) {\n      var nodes = this._toArray(_nodes);\n\n      for (var index = 0, il = nodes.length; index < il; index++) {\n        var node = nodes[index];\n        this.select(node);\n      }\n\n      if (!dontAddToSelectables) {\n        this.addSelectables(nodes);\n      }\n\n      if (triggerCallback) {\n        this.callback(this._selected, false);\n      }\n\n      return this._selected;\n    }\n    /**\n     * Removes specific nodes from the selection\n     * Multiple nodes can be given at once, in contrary to unselect\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes one or multiple nodes\n     * @param {boolean} [triggerCallback] - if callback should be called\n     * @param {boolean} [removeFromSelectables] - if element should be removed from the list of selectable nodes\n     * @return {Array} all selected nodes\n     */\n\n  }, {\n    key: \"removeSelection\",\n    value: function removeSelection(_nodes, triggerCallback, removeFromSelectables) {\n      var nodes = this._toArray(_nodes);\n\n      for (var index = 0, il = nodes.length; index < il; index++) {\n        var node = nodes[index];\n        this.unselect(node);\n      }\n\n      if (removeFromSelectables) {\n        this.removeSelectables(nodes);\n      }\n\n      if (triggerCallback) {\n        this.callback(this._selected, false);\n      }\n\n      return this._selected;\n    }\n    /**\n     * Toggles specific nodes from the selection:\n     * If element is not in selection it will be added, if it is already selected, it will be removed.\n     * Multiple nodes can be given at once.\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes one or multiple nodes\n     * @param {boolean} [triggerCallback] - if callback should be called\n     * @param {boolean} [special] - if true, it also removes selected elements from possible selectable nodes & don’t add them to selectables if they are not\n     * @return {Array} all selected nodes\n     */\n\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(_nodes, triggerCallback, special) {\n      var nodes = this._toArray(_nodes);\n\n      for (var index = 0, il = nodes.length; index < il; index++) {\n        var node = nodes[index];\n\n        if (this._selected.indexOf(node) < 0) {\n          this.addSelection(node, triggerCallback, special);\n        } else {\n          this.removeSelection(node, triggerCallback, special);\n        }\n      }\n\n      return this._selected;\n    }\n    /**\n     * Sets the current selected nodes and optionally run the callback\n     * By default, adds new elements also to the list of selectables\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes – dom nodes\n     * @param {boolean} [triggerCallback] - if callback should be called\n     * @param {boolean} [dontAddToSelectables] - if element should not be added to the list of selectable nodes\n     * @return {Array.<(HTMLElement|SVGElement)>}\n     */\n\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(_nodes, triggerCallback, dontAddToSelectables) {\n      this.clearSelection();\n      this.addSelection(_nodes, triggerCallback, dontAddToSelectables);\n      return this._selected;\n    }\n    /**\n     * Unselect / Deselect all current selected Nodes\n     * @param {boolean} [triggerCallback] - if callback should be called\n     * @return {Array.<(HTMLElement|SVGElement)>} this.selected, should be empty\n     */\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection(triggerCallback) {\n      var selection = this._selected.slice();\n\n      for (var index = 0, il = selection.length; index < il; index++) {\n        var node = selection[index];\n        this.unselect(node);\n      }\n\n      if (triggerCallback) {\n        this.callback(this._selected, false);\n      }\n\n      return this._selected;\n    }\n    /**\n     * Add nodes that can be selected.\n     * The algorithm makes sure that no node is added twice\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes dom nodes\n     * @param {boolean} [addToSelection] if elements should also be added to current selection\n     * @return {Array.<(HTMLElement|SVGElement)>} _nodes the added node(s)\n     */\n\n  }, {\n    key: \"addSelectables\",\n    value: function addSelectables(_nodes, addToSelection) {\n      var nodes = this._toArray(_nodes);\n\n      this._handleSelectables(nodes, false, addToSelection);\n\n      return _nodes;\n    }\n    /**\n     * Gets all nodes that can be selected\n     * @return {Array.<(HTMLElement|SVGElement)>} this.selectables\n     */\n\n  }, {\n    key: \"getSelectables\",\n    value: function getSelectables() {\n      return this.selectables;\n    }\n    /**\n     * Sets all elements that can be selected.\n     * Removes all current selectables (& their respective classes).\n     * Adds the new set to the selectables set, thus replacing the original set.\n     * @param {Array.<(HTMLElement|SVGElement)>} nodes – dom nodes\n     * @param {boolean} [removeFromSelection] if elements should also be removed from current selection\n     * @param {boolean} [addToSelection] if elements should also be added to current selection\n     * @return {Array.<(HTMLElement|SVGElement)>} nodes – the added node(s)\n     */\n\n  }, {\n    key: \"setSelectables\",\n    value: function setSelectables(nodes, removeFromSelection, addToSelection) {\n      this.removeSelectables(this.getSelectables(), removeFromSelection);\n      return this.addSelectables(nodes, addToSelection);\n    }\n    /**\n     * Remove nodes from the nodes that can be selected.\n     * @param {Array.<(HTMLElement|SVGElement)>} _nodes – dom nodes\n     * @param {boolean} [removeFromSelection] if elements should also be removed from current selection\n     * @return {Array.<(HTMLElement|SVGElement)>} _nodes – the removed node(s)\n     */\n\n  }, {\n    key: \"removeSelectables\",\n    value: function removeSelectables(_nodes, removeFromSelection) {\n      var nodes = this._toArray(_nodes);\n\n      this._handleSelectables(nodes, true, removeFromSelection);\n\n      return _nodes;\n    } // Helpers\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Based on a click event object,\n     * checks if the right mouse button was pressed.\n     * (found @ https://stackoverflow.com/a/2405835)\n     * @param {object} event\n     * @return {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"_isRightClick\",\n    value: function _isRightClick(event) {\n      if (!event) {\n        return false;\n      }\n\n      var isRightMB = false;\n\n      if ('which' in event) {\n        // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\n        isRightMB = event.which === 3;\n      } else if ('button' in event) {\n        // IE, Opera\n        isRightMB = event.button === 2;\n      }\n\n      return isRightMB;\n    }\n    /**\n     * Transforms a nodelist or single node to an array\n     * so user doesn’t have to care.\n     * @param {any} nodes\n     * @return {array}\n     * @private\n     */\n\n  }, {\n    key: \"_toArray\",\n    value: function _toArray(nodes) {\n      if (!nodes) return [];\n      if (!nodes.length && this._isElement(nodes)) return [nodes];\n      var array = [];\n\n      for (var i = nodes.length - 1; i >= 0; i--) {\n        array[i] = nodes[i];\n      }\n\n      return array;\n    }\n    /**\n     * Checks if a node is of type element\n     * all credits to vikynandha: https://gist.github.com/vikynandha/6539809\n     * @param {HTMLElement|SVGElement} node\n     * @return {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"_isElement\",\n    value: function _isElement(node) {\n      try {\n        // Using W3 DOM2 (works for FF, Opera and Chrome), also checking for SVGs\n        return node instanceof HTMLElement || node instanceof SVGElement;\n      } catch (e) {\n        // Browsers not supporting W3 DOM2 don't have HTMLElement and\n        // an exception is thrown and we end up here. Testing some\n        // properties that all elements have. (works even on IE7)\n        return _typeof(node) === 'object' && node.nodeType === 1 && _typeof(node.style) === 'object' && _typeof(node.ownerDocument) === 'object';\n      }\n    }\n    /**\n     * Returns cursor x, y position based on event object\n     * /!\\ for internal calculation reasons it does _not_ take\n     * the AREA scroll into consideration unless it’s the outer Document.\n     * Use the public .getCursorPos() from outside, it’s more flexible\n     * @param {Object} [event]\n     * @param {(HTMLElement|SVGElement)} area – containing area / document if none\n     * @return {{x: number, y: number}} cursor X/Y\n     * @private\n     */\n\n  }, {\n    key: \"_getCursorPos\",\n    value: function _getCursorPos(event, area) {\n      if (!event) return {\n        x: 0,\n        y: 0\n      }; // touchend has not touches. so we take the last toucb if a touchevent, we need to store the positions on the prototype\n\n      if (event.touches && event.type !== 'touchend') {\n        this._lastTouch = event;\n      } //if a touchevent, return the last touch rather than the regular event\n      // we need .touches[0] from that event instead\n\n\n      event = event.touches ? this._lastTouch.touches[0] : event;\n      var cPos = {\n        // event.clientX/Y fallback for <IE8\n        x: event.pageX || event.clientX,\n        y: event.pageY || event.clientY\n      };\n      var areaRect = this.getAreaRect(area || document);\n      var docScroll = this.getScroll(); // needed when document is scrollable but area is not\n\n      return {\n        // if it’s constrained in an area the area should be substracted calculate\n        x: cPos.x - areaRect.left - docScroll.x,\n        y: cPos.y - areaRect.top - docScroll.y\n      };\n    }\n    /**\n     * Returns the starting/initial position of the cursor/selector\n     * @return {{x:number,y:number}}\n     */\n\n  }, {\n    key: \"getInitialCursorPosition\",\n    value: function getInitialCursorPosition() {\n      return this._initialCursorPos;\n    }\n    /**\n     * Returns the last seen position of the cursor/selector\n     * @return {{x:number,y:number}}\n     */\n\n  }, {\n    key: \"getCurrentCursorPosition\",\n    value: function getCurrentCursorPosition() {\n      return this._newCursorPos;\n    }\n    /**\n     * Returns the previous position of the cursor/selector\n     * @return {{x:number,y:number}}\n     */\n\n  }, {\n    key: \"getPreviousCursorPosition\",\n    value: function getPreviousCursorPosition() {\n      return this._previousCursorPos;\n    }\n    /**\n     * Returns the cursor position difference between start and now\n     * If usePreviousCursorDifference is passed,\n     * it will output the cursor position difference between the previous selection and now\n     * @param {boolean} [usePreviousCursorDifference]\n     * @return {{x:number,y:number}}\n     */\n\n  }, {\n    key: \"getCursorPositionDifference\",\n    value: function getCursorPositionDifference(usePreviousCursorDifference) {\n      var posA = this.getCurrentCursorPosition();\n      var posB = usePreviousCursorDifference ? this.getPreviousCursorPosition() : this.getInitialCursorPosition();\n      return {\n        x: posA.x - posB.x,\n        y: posA.y - posB.y\n      };\n    }\n    /**\n     * Returns the current x, y scroll value of a container\n     * If container has no scroll it will return 0\n     * @param {(HTMLElement|SVGElement)} [area]\n     * @return {{x:number,y:number}} scroll X/Y\n     */\n\n  }, {\n    key: \"getScroll\",\n    value: function getScroll(area) {\n      var body = {\n        top: document.body.scrollTop > 0 ? document.body.scrollTop : document.documentElement.scrollTop,\n        left: document.body.scrollLeft > 0 ? document.body.scrollLeft : document.documentElement.scrollLeft\n      };\n      var scroll = {\n        // when the rectangle is bound to the document, no scroll is needed\n        y: area && area.scrollTop >= 0 ? area.scrollTop : body.top,\n        x: area && area.scrollLeft >= 0 ? area.scrollLeft : body.left\n      };\n      return scroll;\n    }\n    /**\n     * Returns the top/left/bottom/right/width/height\n     * values of a node. If Area is document then everything\n     * except the sizes will be nulled.\n     * @param {(HTMLElement|SVGElement|any)} area\n     * @return {{top:number,left:number,bottom:number,right:number,width:number,height:number}}\n     */\n\n  }, {\n    key: \"getAreaRect\",\n    value: function getAreaRect(area) {\n      if (area === document) {\n        var size = {\n          y: area.documentElement.clientHeight > 0 ? area.documentElement.clientHeight : window.innerHeight,\n          x: area.documentElement.clientWidth > 0 ? area.documentElement.clientWidth : window.innerWidth\n        };\n        return {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          width: size.x,\n          height: size.y\n        };\n      }\n\n      var rect = area.getBoundingClientRect();\n      return {\n        top: rect.top,\n        left: rect.left,\n        bottom: rect.bottom,\n        right: rect.right,\n        width: rect.width,\n        height: rect.height\n      };\n    }\n    /**\n     * Updates the node style left, top, width,\n     * height values accordingly.\n     * @param {(HTMLElement|SVGElement)} node\n     * @param {Object} pos { x, y, w, h }\n     * @return {(HTMLElement|SVGElement)}\n     * @private\n     */\n\n  }, {\n    key: \"_updatePos\",\n    value: function _updatePos(node, pos) {\n      node.style.left = pos.x + 'px';\n      node.style.top = pos.y + 'px';\n      node.style.width = pos.w + 'px';\n      node.style.height = pos.h + 'px';\n      return node;\n    }\n  }]);\n\n  return DragSelect;\n}(); // Make exportable\n//////////////////////////////////////////////////////////////////////////////////////\n\n/* eslint-disable no-undef */\n// Module exporting\n\n\nif (typeof module !== 'undefined' && module !== null) {\n  module.exports = DragSelect; // AMD Modules\n} else if ( // @ts-ignore\ntypeof define !== 'undefined' && // @ts-ignore\ntypeof define === 'function' && // @ts-ignore\ndefine) {\n  // @ts-ignore\n  define(function () {\n    return DragSelect;\n  });\n} else {\n  // @ts-ignore\n  window.DragSelect = DragSelect;\n}","map":null,"metadata":{},"sourceType":"script"}